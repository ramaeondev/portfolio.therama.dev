
name: Deploy to AWS S3 + CloiddFront + Cloudflare
# This workflow builds the project and deploys it to AWS S3 and CloudFront

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Capture start time
        run: echo "START_TIME=$(date +%s)" >> $GITHUB_ENV

      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          
      - name: Clean install dependencies
        run: |
            rm -rf node_modules package-lock.json
            npm cache clean --force
            npm install

      - name: Copy README and package.json to public
        run: |
              mkdir -p public/meta
              cp README.md public/meta/
              cp package.json public/meta/
      
      - name: Read package.json and POST to Projects table          
        run: |
                VERSION=$(jq -r '.version' package.json)
                STATUS=$(jq -r '.status' package.json)
                PROJECT_ID=$(jq -r '.project_id' package.json)
                update_project_version=$(jq -r '.update_project_version' package.json)
        
                echo "Version: $VERSION"
                echo "Status: $STATUS"
                echo "Project ID: $PROJECT_ID"
                echo "update_project_version: $update_project_version"
        
                RESPONSE=$(curl -s -X POST $update_project_version \
                  -H "Content-Type: application/json" \
                  -d '{
                    "project_id": "'"$PROJECT_ID"'",
                    "version": "'"$VERSION"'",
                    "status": "'"$STATUS"'"
                  }')
        
                echo "$RESPONSE" > deployment-status.json
        
      - name: Upload deployment status as artifact
        uses: actions/upload-artifact@v4
        with:
          name: deployment-status
          path: deployment-status.json          
        
      - name: Build
        run: npm run build
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_GLOBAL }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_GLOBAL }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Deploy to S3
        run: aws s3 sync ./dist s3://${{ secrets.S3_BUCKET }} --delete
        
      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"
      
      - name: Log deployment to Supabase
        run: |
                VERSION=$(jq -r '.version' package.json)
                STATUS=$(jq -r '.status' package.json)
                PROJECT_ID=$(jq -r '.project_id' package.json)
                log_deployment=$(jq -r '.log_deployment' package.json)
                COMMIT_MESSAGE=$(git log -1 --pretty=%B | sed 's/"/\\"/g')
                HOMEPAGE=$(jq -r '.homepage' package.json)

                END_TIME=$(date +%s)
                DURATION=$((END_TIME - START_TIME))
                IS_SUCCESS=${{ job.status == 'success' && 'true' || 'false' }}
                
                # Create JSON payload with proper escaping
                JSON_PAYLOAD=$(cat <<EOF
                {
                  "project_id": "$PROJECT_ID",
                  "version": "$VERSION",
                  "status": "$STATUS",
                  "github_sha": "${{ github.sha }}",
                  "github_ref": "${{ github.ref }}",
                  "actor": "${{ github.actor }}",
                  "commit_message": "$COMMIT_MESSAGE",
                  "deployment_url": "$HOMEPAGE",
                  "duration_in_seconds": $DURATION,
                  "is_success": $IS_SUCCESS
                }
                EOF
                )
                
                # Send the request with properly formatted JSON
                curl -s -X POST "$log_deployment" \
                  -H "Content-Type: application/json" \
                  -d "$JSON_PAYLOAD"
